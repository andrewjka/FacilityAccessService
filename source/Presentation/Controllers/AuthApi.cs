/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System.Threading.Tasks;
using AutoMapper;
using Domain.AuthScope.Services;
using Domain.CommonScope.ValueObjects;
using Microsoft.AspNetCore.Mvc;
using Presentation.Authentication.Attributes;
using Presentation.Authentication.Context;
using Presentation.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace Presentation.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class AuthApiController : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly IAuthUserService _authUserService;

    public AuthApiController(IAuthUserService authUserService, IMapper mapper)
    {
        _authUserService = authUserService;
        _mapper = mapper;
    }

    /// <summary>
    ///     Performs a user login.
    /// </summary>
    /// <param name="authLoginRequest"></param>
    /// <response code="200">AuthenticationResult.</response>
    [HttpPost]
    [AllowAnonymous]
    [Route("/auth/login")]
    [Consumes("application/json")]
    [SwaggerOperation("AuthLogin")]
    [SwaggerResponse(200, type: typeof(AuthLogin200Response), description: "AuthenticationResult.")]
    public async Task<IActionResult> AuthLogin([FromBody] AuthLoginRequest authLoginRequest)
    {
        AuthenticationResult result =
            await _authUserService.AuthenticateAsync(authLoginRequest.Email, authLoginRequest.Password);

        return Ok(new AuthLogin200Response()
        {
            AccessToken = result.AccessToken, RefreshToken = result.RefreshToken.GetHexFormat()
        });
    }

    /// <summary>
    ///     Performs user logout by invalidating refresh token
    /// </summary>
    /// <param name="authLogoutRequest"></param>
    /// <response code="200">Refresh token successfully invalidated</response>
    [HttpPost]
    [AllowAnonymous]
    [Route("/auth/logout")]
    [Consumes("application/json")]
    [SwaggerOperation("AuthLogout")]
    [SwaggerResponse(200, type: typeof(bool), description: "Refresh token successfully invalidated")]
    public async Task<IActionResult> AuthLogout([FromBody] AuthLogoutRequest authLogoutRequest)
    {
        await _authUserService.SignOutAsync(Token512Bit.GetFromHex(authLogoutRequest.RefreshToken));

        return Ok(true);
    }

    /// <summary>
    /// Performs a user login.
    /// </summary>
    /// <param name="authRefreshTokenRequest"></param>
    /// <response code="200">AccessToken.</response>
    [HttpPost]
    [AllowAnonymous]
    [Route("/auth/refresh-token")]
    [Consumes("application/json")]
    [SwaggerOperation("AuthRefreshToken")]
    [SwaggerResponse(statusCode: 200, type: typeof(string), description: "AccessToken.")]
    public async Task<IActionResult> AuthRefreshToken([FromBody] AuthRefreshTokenRequest authRefreshTokenRequest)
    {
        return Ok(await _authUserService.RefreshAccessTokenAsync(
            Token512Bit.GetFromHex(authRefreshTokenRequest.RefreshToken)));
    }

    /// <summary>
    ///     Returns information about the current user
    /// </summary>
    /// <response code="200">Current user&#39;s information</response>
    [HttpGet]
    [Route("/whoami")]
    [SwaggerOperation("GetCurrentUser")]
    [SwaggerResponse(200, type: typeof(User), description: "Current user&#39;s information")]
    public virtual IActionResult GetCurrentUser()
    {
        return Ok(_mapper.Map<User>(HttpContext.GetUserOrDefault()));
    }
}