/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System.Threading.Tasks;
using Business.Secure.AccessScope.Interfaces;
using Domain.AccessScope.Actions;
using Domain.AccessScope.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Presentation.Authentication.Context;
using Presentation.Models;

namespace Presentation.Controllers
{
    /// <summary>
    /// Контроллер для работы с временными токенами доступа
    /// </summary>
    [ApiController]
    [Route("/access/passtoken/")]
    public class PassTokenController : ControllerBase
    {
        private readonly IPassService _passService;

        public PassTokenController(IPassService passService)
        {
            _passService = passService;
        }

        /// <summary>
        /// Получить временный pass token
        /// </summary>
        /// <remarks>Генерирует одноразовый токен для доступа к защищенным операциям</remarks>
        /// <response code="200">Успешная генерация pass token</response>
        [HttpPost]
        [SwaggerOperation("GeneratePassToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Успешная генерация pass token")]
        public async Task<IActionResult> GeneratePassToken()
        {
            return Ok(await _passService.GenerateAccessToken(HttpContext.GetUserOrDefault().Id));
        }
    }

    /// <summary>
    /// Контроллер для проверки доступа через охрану
    /// </summary>
    [ApiController]
    [Route("/access/verify-guard")]
    public class GuardAccessController : ControllerBase
    {
        private readonly IAccessGuardServiceSecure _accessGuard;

        public GuardAccessController(IAccessGuardServiceSecure accessGuard)
        {
            _accessGuard = accessGuard;
        }

        /// <summary>
        /// Verifies employee access to the facility through the guarder.
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Boolean value denoting access.</response>
        [HttpPost]
        [Consumes("application/json")]
        [SwaggerOperation("VerifyAccessViaGuard")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Boolean value denoting access.")]
        public async Task<IActionResult> VerifyAccess(
            [FromBody] VerifyAccessViaTerminalRequest request)
        {
            var model = new VerifyAccessModel(request.FacilityId, request.Passtoken);
            return Ok(await _accessGuard.VerifyAccessAsync(model));
        }
    }

    /// <summary>
    /// Контроллер для проверки доступа через терминал
    /// </summary>
    [ApiController]
    [Route("/access/verify-terminal")]
    public class TerminalAccessController : ControllerBase
    {
        private readonly IAccessTerminalServiceSecure _accessTerminal;

        public TerminalAccessController(IAccessTerminalServiceSecure accessTerminal)
        {
            _accessTerminal = accessTerminal;
        }

        /// <summary>
        /// Verifies employee access to the facility through the terminal.
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Boolean value denoting access.</response>
        [HttpPost]
        [Consumes("application/json")]
        [SwaggerOperation("VerifyAccessViaTerminal")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Boolean value denoting access.")]
        public async Task<IActionResult> VerifyAccess(
            [FromBody] VerifyAccessViaTerminalRequest request)
        {
            var model = new VerifyAccessModel(request.FacilityId, request.Passtoken);
            return Ok(await _accessTerminal.VerifyAccessAsync(model));
        }
    }
}