/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#region

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using AutoMapper;
using Business.Secure.AccessScope.Interfaces;
using Domain.AccessScope.Actions;
using Domain.AccessScope.Specifications;
using Domain.AccessScope.ValueObjects;
using Microsoft.AspNetCore.Mvc;
using Presentation.Models;
using Swashbuckle.AspNetCore.Annotations;

#endregion

namespace Presentation.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class CategoryAccessControlManagementApiController : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly IAccessCategoryServiceSecure _service;


    public CategoryAccessControlManagementApiController(IAccessCategoryServiceSecure service, IMapper mapper)
    {
        _service = service;
        _mapper = mapper;
    }

    /// <summary>
    /// Gets a list of categories to which the user has access.
    /// </summary>
    /// <param name="userId"></param>
    /// <param name="take"></param>
    /// <param name="offset"></param>
    /// <response code="200">List of categories to which the user has access.</response>
    [HttpGet]
    [Route("/users/{user_id}/access/categories")]
    [SwaggerOperation("GetAccessUserCategories")]
    [SwaggerResponse(statusCode: 200, type: typeof(List<UserCategory>),
        description: "List of categories to which the user has access.")]
    public async Task<IActionResult> GetAccessUserCategories(
        [FromRoute(Name = "user_id")] [Required]
        string userId, [FromQuery(Name = "take")] [Range(1, 100)] int? take,
        [FromQuery(Name = "offset")] [Range(0, 100)]
        int? offset)
    {
        var specification = new DynamicUserCategorySpecification(
            userId,
            take,
            offset
        );

        var userCategories = await _service.GetAccessesAsync(specification);

        return Ok(_mapper.Map<ReadOnlyCollection<UserCategory>>(userCategories));
    }

    /// <summary>
    ///     Creates user access to a category.
    /// </summary>
    /// <param name="userId"></param>
    /// <param name="request"></param>
    /// <response code="200">Access to the category issued.</response>
    [HttpPost]
    [Route("/users/{user_id}/access/categories")]
    [Consumes("application/json")]
    [SwaggerOperation("GrantUserAccessCategory")]
    public async Task<IActionResult> GrantUserAccessCategory(
        [FromRoute(Name = "user_id")] [Required]
        string userId,
        [FromBody] GrantUserAccessCategoryRequest request
    )
    {
        var model = new GrantAccessCategoryModel(
            request.CategoryId,
            userId,
            new AccessPeriod(request.StartDate, request.EndDate));

        await _service.GrantAccessAsync(model);

        return Ok();
    }

    /// <summary>
    ///     Removes category access from the user.
    /// </summary>
    /// <param name="userId"></param>
    /// <param name="categoryId"></param>
    /// <response code="200">Access to the category has been successfully removed.</response>
    [HttpDelete]
    [Route("/users/{user_id}/access/categories/{category_id}")]
    [SwaggerOperation("RevokeUserAccessCategory")]
    public async Task<IActionResult> RevokeUserAccessCategory(
        [FromRoute(Name = "user_id")] [Required]
        string userId,
        [FromRoute(Name = "category_id")] [Required]
        Guid categoryId
    )
    {
        var model = new RevokeAccessCategoryModel(
            categoryId,
            userId
        );

        await _service.RevokeAccessAsync(model);

        return Ok();
    }
}