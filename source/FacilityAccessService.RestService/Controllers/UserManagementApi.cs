/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#region

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using AutoMapper;
using FacilityAccessService.Business.UserScope.Specifications;
using FacilityAccessService.Domain.Secure.UserScope.Interfaces;
using FacilityAccessService.RestService.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

#endregion

namespace FacilityAccessService.RestService.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserManagementApiController : ControllerBase
    {
        private readonly IUserServiceSecure _service;

        private readonly IMapper _mapper;


        public UserManagementApiController(IUserServiceSecure service, IMapper mapper)
        {
            this._service = service;
            this._mapper = mapper;
        }


        /// <summary>
        /// Gets a list of all users.
        /// </summary>
        /// <param name="take"></param>
        /// <param name="offset"></param>
        /// <response code="200">A list of all users.</response>
        [HttpGet]
        [Route("/users/")]
        [SwaggerOperation("GetAllUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "A list of all users.")]
        public async Task<IActionResult> GetAllUsers(
            [FromQuery(Name = "take")] [Range(1, 100)]
            int? take, [FromQuery(Name = "offset")] [Range(0, 100)] int? offset,
            [FromQuery(Name = "searchName")] string searchName
        )
        {
            DynamicUserSpecification spec =
                new DynamicUserSpecification(
                    offset: offset,
                    take: take,
                    searchId: searchName
                );

            var users = await _service.GetUsersAsync(spec);


            return Ok(_mapper.Map<IReadOnlyCollection<User>>(users));
        }
    }
}