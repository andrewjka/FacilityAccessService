/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#region

using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using AutoMapper;
using FacilityAccessService.Business.AccessScope.Actions;
using FacilityAccessService.Business.AccessScope.Specifications;
using FacilityAccessService.Business.AccessScope.ValueObjects;
using FacilityAccessService.Domain.Secure.AccessScope.Interfaces;
using FacilityAccessService.RestService.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

#endregion

namespace FacilityAccessService.RestService.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CategoryAccessControlManagementApiController : ControllerBase
    {
        private readonly IAccessCategoryServiceSecure _service;

        private readonly IMapper _mapper;


        public CategoryAccessControlManagementApiController(IAccessCategoryServiceSecure service, IMapper mapper)
        {
            this._service = service;
            this._mapper = mapper;
        }

        /// <summary>
        /// Gets a list of categories to which the user has access.
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="take"></param>
        /// <param name="offset"></param>
        /// <param name="searchName"></param>
        /// <response code="200">List of categories to which the user has access.</response>
        [HttpGet]
        [Route("/users/{user_id}/access/categories")]
        [SwaggerOperation("GetAccessUserCategories")]
        [SwaggerResponse(statusCode: 200, type: typeof(Category),
            description: "List of categories to which the user has access.")]
        public async Task<IActionResult> GetAccessUserCategories(
            [FromRoute(Name = "user_id")] [Required]
            string userId,
            [FromQuery(Name = "take")] [Range(1, 100)]
            int? take,
            [FromQuery(Name = "offset")] [Range(1, 100)]
            int? offset
        )
        {
            DynamicUserCategorySpecification specification = new DynamicUserCategorySpecification(
                userId: userId,
                take: take,
                offset: offset
            );

            var userCategories = await _service.GetAccessUserCategoriesAsync(specification);

            return Ok(_mapper.Map<ReadOnlyCollection<UserCategory>>(userCategories));
        }

        /// <summary>
        /// Creates user access to a category.
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="request"></param>
        /// <response code="200">Access to the category issued.</response>
        [HttpPost]
        [Route("/users/{user_id}/access/categories")]
        [Consumes("application/json")]
        [SwaggerOperation("GrantUserAccessCategory")]
        public async Task<IActionResult> GrantUserAccessCategory(
            [FromRoute(Name = "user_id")] [Required]
            string userId,
            [FromBody] GrantUserAccessCategoryRequest request
        )
        {
            var model = new GrantAccessCategoryModel(
                CategoryId: request.CategoryId,
                UserId: userId,
                new AccessPeriod(request.StartDate, request.EndDate));

            await _service.GrantAccessAsync(model);

            return Ok();
        }

        /// <summary>
        /// Removes category access from the user.
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="categoryId"></param>
        /// <response code="200">Access to the category has been successfully removed.</response>
        [HttpDelete]
        [Route("/users/{user_id}/access/categories/{category_id}")]
        [SwaggerOperation("RevokeUserAccessCategory")]
        public async Task<IActionResult> RevokeUserAccessCategory(
            [FromRoute(Name = "user_id")] [Required]
            string userId,
            [FromRoute(Name = "category_id")] [Required]
            Guid categoryId
        )
        {
            var model = new RevokeAccessCategoryModel(
                CategoryId: categoryId,
                UserId: userId
            );

            await _service.RevokeAccessAsync(model);

            return Ok();
        }
    }
}