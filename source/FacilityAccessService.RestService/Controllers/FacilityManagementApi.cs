/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#region

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using AutoMapper;
using FacilityAccessService.Business.CommonScope.Specification;
using FacilityAccessService.Business.FacilityScope.Actions;
using FacilityAccessService.Business.FacilityScope.Specifications;
using FacilityAccessService.Business.UserScope.Specifications;
using FacilityAccessService.Domain.Secure.FacilityScope.Interfaces;
using FacilityAccessService.RestService.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

#endregion

namespace FacilityAccessService.RestService.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FacilityManagementApiController : ControllerBase
    {
        private readonly IFacilityServiceSecure _service;

        private readonly IMapper _mapper;


        public FacilityManagementApiController(IFacilityServiceSecure service, IMapper mapper)
        {
            this._service = service;
            this._mapper = mapper;
        }


        /// <summary>
        /// Creates a facility and returns it.
        /// </summary>
        /// <param name="request"></param>
        /// <response code="200">Facility.</response>
        [HttpPost]
        [Route("/facilities")]
        [Consumes("application/json")]
        [SwaggerOperation("CreateFacility")]
        [SwaggerResponse(statusCode: 200, type: typeof(Facility), description: "Facility.")]
        public async Task<IActionResult> CreateFacility([FromBody] CreateFacilityRequest request)
        {
            var model = new CreateFacilityModel(
                Name: request.Name,
                Description: request.Description
            );

            var facility = await _service.CreateFacilityAsync(model);

            return Ok(_mapper.Map<Facility>(facility));
        }

        /// <summary>
        /// Deletes facility by id.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Facility successfully deleted.</response>
        [HttpDelete]
        [Route("/facilities/{id}")]
        [SwaggerOperation("DeleteFacility")]
        public async Task<IActionResult> DeleteFacility([FromRoute(Name = "id")] [Required] Guid id)
        {
            var model = new DeleteFacilityModel(id);

            await _service.DeleteFacilityAsync(model);

            return Ok();
        }

        /// <summary>
        /// Returns all facilities according to the conditions.
        /// </summary>
        /// <param name="take"></param>
        /// <param name="offset"></param>
        /// <param name="searchName"></param>
        /// <response code="200">A list of facilities that match the provided query parameters.</response>
        [HttpGet]
        [Route("/facilities")]
        [SwaggerOperation("GetAllFacilities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Facility>),
            description: "A list of facilities that match the provided query parameters.")]
        public async Task<IActionResult> GetAllFacilities(
            [FromQuery(Name = "take")] [Range(1, 100)]
            int? take,
            [FromQuery(Name = "offset")] [Range(0, 100)]
            int? offset,
            [FromQuery(Name = "searchName")] string searchName
        )
        {
            DynamicFacilitySpecification specification = new DynamicFacilitySpecification(
                take: take, offset: offset,
                searchName: searchName
            );

            var facilities = await _service.GetFacilitiesAsync(specification);

            return Ok(_mapper.Map<ReadOnlyCollection<Facility>>(facilities));
        }

        /// <summary>
        /// Updates a facility partially.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="request"></param>
        /// <response code="200">Facility successfully updated.</response>
        [HttpPatch]
        [Route("/facilities/{id}")]
        [Consumes("application/json")]
        [SwaggerOperation("UpdateFacility")]
        [SwaggerResponse(statusCode: 200, type: typeof(Facility), description: "Facility successfully updated.")]
        public async Task<IActionResult> UpdateFacility(
            [FromRoute(Name = "id")] [Required] Guid id,
            [FromBody] UpdateFacilityRequest request
        )
        {
            var model = new UpdateFacilityModel(
                FacilityId: id,
                Name: request.Name,
                Description: request.Description
            );

            var facility = await _service.UpdateFacilityAsync(model);

            return Ok(_mapper.Map<Facility>(facility));
        }
    }
}