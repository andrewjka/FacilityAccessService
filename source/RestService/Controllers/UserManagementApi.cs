/*
 * Facility Access Service API
 *
 * The service an access control system for facilities within the enterprise territory.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#region

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using AutoMapper;
using Business.Secure.UserScope.Interfaces;
using Domain.UserScope.Specifications;
using Microsoft.AspNetCore.Mvc;
using RestService.Authentication.Context;
using RestService.Models;
using Swashbuckle.AspNetCore.Annotations;

#endregion

namespace RestService.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class UserManagementApiController : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly IUserServiceSecure _service;


    public UserManagementApiController(IUserServiceSecure service, IMapper mapper)
    {
        _service = service;
        _mapper = mapper;
    }


    /// <summary>
    ///     Gets a list of all users.
    /// </summary>
    /// <param name="take"></param>
    /// <param name="offset"></param>
    /// <response code="200">A list of all users.</response>
    [HttpGet]
    [Route("/users/")]
    [SwaggerOperation("GetAllUsers")]
    [SwaggerResponse(200, type: typeof(List<User>), description: "A list of all users.")]
    public async Task<IActionResult> GetAllUsers(
        [FromQuery(Name = "take")] [Range(1, 100)]
        int? take, [FromQuery(Name = "offset")] [Range(0, 100)] int? offset,
        [FromQuery(Name = "searchName")] string searchName
    )
    {
        var spec =
            new DynamicUserSpecification(
                offset: offset,
                take: take,
                searchId: searchName
            );

        var users = await _service.GetUsersAsync(spec);


        return Ok(_mapper.Map<IReadOnlyCollection<User>>(users));
    }

    /// <summary>
    /// Returns information about the current user
    /// </summary>
    /// <response code="200">Current user&#39;s information</response>
    [HttpGet]
    [Route("/whoami")]
    [SwaggerOperation("GetCurrentUser")]
    [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Current user&#39;s information")]
    public IActionResult GetCurrentUser()
    {
        return Ok(HttpContext.GetUserOrDefault());
    }
}